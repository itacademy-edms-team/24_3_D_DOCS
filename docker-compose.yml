services:
  postgres:
    image: postgres:16-alpine
    container_name: rusal_postgres
    environment:
      POSTGRES_USER: rusal_user
      POSTGRES_PASSWORD: rusal_password
      POSTGRES_DB: rusal_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - rusal_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rusal_user -d rusal_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: rusal_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rusal_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: rusal_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    networks:
      - rusal_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  pandoc:
    build:
      context: ./pandoc
      dockerfile: Dockerfile
    container_name: rusal_pandoc
    volumes:
      - pandoc_workspace:/workspace
    networks:
      - rusal_network
    command: ["tail", "-f", "/dev/null"]
    healthcheck:
      test: ["CMD", "pandoc", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rusal_backend
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:5159
    ports:
      - "5159:5159"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - pandoc_workspace:/workspace
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      pandoc:
        condition: service_healthy
    networks:
      - rusal_network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rusal_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - rusal_network
    environment:
      - NODE_ENV=production

networks:
  rusal_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  pandoc_workspace:

